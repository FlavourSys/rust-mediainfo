"2f2fcb4f04aa7b4e9309297695c9d12da46a30ea"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#9=[nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 5983) (undo-tree-id242 . -5) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -5) 5988) nil (22790 21309 335863 421000) 0 nil]) ((#("fn free(ptr: *const void);" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-function-name-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-variable-name-face) 11 12 (composition (11 1 #1=[9 57708]) fontified t) 12 13 (fontified t) 13 14 (composition (4 1 #3=[9 57711]) fontified t) 14 19 (fontified t face font-lock-keyword-face) 19 24 (fontified t) 24 26 (fontified t)) . 5988) (undo-tree-id246 . -26) (undo-tree-id247 . -26)) nil (22790 21309 335880 199000) 0 nil]) ((nil rear-nonsticky nil 4144 . 4145) (4027 . 4145)) nil (22790 21309 335886 586000) 0 nil]) ((#("// TODO(erick): Leak" 0 2 (composition (6 2 #2=[9 57647]) fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 7 (fontified t face font-lock-warning-face) 7 14 (fontified t face font-lock-comment-face) 14 15 (composition (11 1 #1#) fontified t face font-lock-comment-face) 15 20 (fontified t face font-lock-comment-face)) . 4027) (undo-tree-id248 . -20) (undo-tree-id249 . -20)) nil (22790 21309 335896 858000) 0 nil]) ((nil rear-nonsticky nil 3424 . 3425) (3307 . 3425)) nil (22790 21309 335902 522000) 0 nil]) ((#("// TODO(erick): Leak" 0 2 (composition (6 2 #2#) fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 7 (fontified t face font-lock-warning-face) 7 14 (fontified t face font-lock-comment-face) 14 15 (composition (11 1 #1#) fontified t face font-lock-comment-face) 15 20 (fontified t face font-lock-comment-face)) . -3307) (undo-tree-id250 . -20) (undo-tree-id251 . -20) 3327) nil (22790 21309 335913 35000) 0 nil]) ((2953 . 2958)) nil (22790 21309 335919 861000) 0 nil]) ((#("r" 0 1 (fontified t face font-lock-comment-face)) . -2953) (undo-tree-id252 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -2954) (undo-tree-id253 . -1) 2955) nil (22790 21309 335931 210000) 0 nil]) ((2936 . 2955)) nil (22790 21309 335936 954000) 0 nil]) ((2932 . 2936)) nil (22790 21309 335940 539000) 0 nil]) ((2925 . 2932)) nil (22790 21309 335944 128000) 0 nil]) ((2912 . 2915) 2922) nil (22790 21309 335948 490000) 0 nil]) ((2912 . 2922)) nil (22790 21309 335952 281000) 0 nil]) ((2899 . 2912)) nil (22790 21309 335955 814000) 0 nil]) ((2889 . 2899)) nil (22790 21309 335959 385000) 0 nil]) ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -2889) (undo-tree-id254 . -1) 2890) nil (22790 21309 335968 206000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 2890) (undo-tree-id255 . -1) 2891) nil (22790 21309 335977 168000) 0 nil]) ((#("i" 0 1 (fontified t face font-lock-comment-face)) . -2891) (undo-tree-id256 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -2892) (undo-tree-id257 . -1) 2893) nil (22790 21309 335989 265000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 2893) (undo-tree-id258 . -1) 2894) nil (22790 21309 335998 310000) 0 nil]) ((#("not " 0 4 (fontified t face font-lock-comment-face)) . 2894) (undo-tree-id259 . -4) 2898) nil (22790 21309 336007 13000) 0 nil]) ((#("ex" 0 2 (fontified t face font-lock-comment-face)) . 2898) (undo-tree-id260 . -2) 2900) nil (22790 21309 336015 745000) 0 nil]) ((2880 . 2900)) nil (22790 21309 336020 436000) 0 nil]) ((2877 . 2880)) nil (22790 21309 336024 216000) 0 nil]) ((2856 . 2877)) nil (22790 21309 336027 872000) 0 nil]) ((#("Leak" 0 4 (fontified t face font-lock-comment-face)) . 2856) (undo-tree-id261 . -4) 2860) nil (22790 21309 336036 725000) 0 nil]) ((#("
" 0 1 (fontified t)) . 3024) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 3025) nil (22790 21309 336056 646000) 0 nil]) ((#("
            free(result_ptr as *const void);" 0 1 (fontified t) 1 13 (fontified t) 13 17 (fontified t) 17 18 (fontified t) 18 29 (fontified t) 29 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 33 (fontified t composition (4 1 #3#)) 33 38 (fontified t face font-lock-keyword-face) 38 43 (fontified t) 43 45 (fontified t)) . 3025) (undo-tree-id267 . -45) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -13) (undo-tree-id271 . -45)) nil (22790 21309 336077 243000) 0 nil]) ((#("
" 0 1 (fontified t)) . 3437) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) 3438) nil (22790 21309 336099 711000) 0 nil]) ((#("
            free(result_ptr as *const void);" 0 1 (fontified t) 1 17 (fontified t) 17 18 (fontified t) 18 29 (fontified t) 29 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 33 (composition (4 1 #3#) fontified t) 33 38 (fontified t face font-lock-keyword-face) 38 43 (fontified t) 43 45 (fontified t)) . 3438) (undo-tree-id278 . -45) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -45) (undo-tree-id282 . -45) (undo-tree-id283 . -45)) nil (22790 21309 336121 454000) 0 nil]) ((#("
" 0 1 (fontified t)) . 4329) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) 4330) nil (22790 21309 336148 760000) 0 nil]) ((#("
            free(result_ptr as *const void);" 0 1 (fontified t) 1 13 (fontified t) 13 17 (fontified t) 17 18 (fontified t) 18 29 (fontified t) 29 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 33 (composition (4 1 #3#) fontified t) 33 38 (fontified t face font-lock-keyword-face) 38 43 (fontified t) 43 45 (fontified t)) . 4330) (undo-tree-id291 . -45) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -45) (undo-tree-id295 . -13) (undo-tree-id296 . -45) (undo-tree-id297 . -45) (t 22790 21086 819266 336000)) nil (22790 21309 336174 179000) 0 nil]) ((#("            " 0 12 (fontified t)) . -4376) (#("            " 0 12 (fontified t)) . -3484) (#("            " 0 12 (fontified t)) . -3071) 4399) nil (22790 21086 744220 811000) 0 nil]) ((4367 . 4399)) nil (22790 21086 744230 486000) 0 nil]) ((4355 . 4367)) nil (22790 21086 744235 20000) 0 nil]) ((4356 . 4368) (#("            " 0 12 (fontified nil)) . 4355) (undo-tree-id236 . -12) (4355 . 4368) (#("            " 0 12 (fontified nil)) . 4354) (4354 . 4366) (4354 . 4355)) nil (22790 21086 744257 488000) 0 nil]) ((3038 . 3070)) nil (22790 21086 744263 926000) 0 nil]) ((3026 . 3038)) nil (22790 21086 744269 616000) 0 nil]) ((3027 . 3039) (#("            " 0 12 (fontified nil)) . 3026) (undo-tree-id237 . -12) (3026 . 3039) (#("            " 0 12 (fontified nil)) . 3025) (3025 . 3037) (3025 . 3026)) nil (22790 21086 744282 41000) 0 nil]) ((3436 . 3437)) nil (22790 21086 744288 519000) 0 nil]) ((3429 . 3435)) nil (22790 21086 744292 321000) 0 nil]) ((#("r" 0 1 (fontified t)) . -3429) (undo-tree-id238 . -1) 3430) nil (22790 21086 744300 817000) 0 nil]) ((3420 . 3430)) nil (22790 21086 744305 905000) 0 nil]) ((3410 . 3420) (#("res" 0 3 (fontified t)) . -3410) (undo-tree-id239 . -3) 3413) nil (22790 21086 744314 906000) 0 nil]) ((3410 . 3413) (3409 . 3411) (#("(" 0 1 (fontified nil)) . -3409) (3405 . 3410)) nil (22790 21086 744322 697000) 0 nil]) ((3393 . 3405)) nil (22790 21086 744328 376000) 0 nil]) ((3394 . 3406) (#("            " 0 12 (fontified nil)) . 3393) (undo-tree-id240 . -12) (3393 . 3406) (#("            " 0 12 (fontified nil)) . 3392) (3392 . 3404) (3392 . 3393)) nil (22790 21086 744340 133000) 0 nil]) ((5719 . 5720)) nil (22790 21086 744346 468000) 0 nil]) ((5714 . 5718)) nil (22790 21086 744350 564000) 0 nil]) ((5710 . 5714)) nil (22790 21086 744354 403000) 0 nil]) ((#("i" 0 1 (fontified t)) . -5710) (undo-tree-id241 . -1) 5711) nil (22790 21086 744362 568000) 0 nil]) ((5702 . 5711)) nil (22790 21086 744367 663000) 0 nil]) ((5701 . 5703) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -5701) (5694 . 5702)) nil (22790 21086 744373 449000) 0 nil]) ((5689 . 5694) (t 22790 20873 609506 591000)) nil (22790 21086 744379 85000) 0 nil]) ((#("
" 0 1 (fontified t)) . 43) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) 44 (t 22790 20829 92194 59000)) nil (22790 20873 568914 50000) 0 nil]) ((#("
" 0 1 (fontified t)) . -98) (undo-tree-id219 . -1) (undo-tree-id220 . -1)) nil (22790 20829 52304 890000) 0 nil]) ((#("use std::ffi::CStr;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (composition (0 2 #4=[9 57610]) fontified t) 9 12 (fontified t face font-lock-constant-face) 12 14 (composition (0 2 #4#) fontified t) 14 18 (fontified t face font-lock-type-face) 18 19 (fontified t)) . -98) (undo-tree-id221 . -4) (undo-tree-id222 . -19) (undo-tree-id223 . -19) 117) nil (22790 20829 52324 986000) 0 nil]) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . -98) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -2) (undo-tree-id227 . -2)) nil (22790 20829 52344 310000) 0 nil]) ((#("use std::ptr;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (composition (0 2 #4#) fontified t) 9 13 (fontified t)) . 98) (undo-tree-id228 . -13) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -13) (undo-tree-id232 . -13) (t 22790 20638 176090 652000)) nil (22790 20829 52366 197000) 0 nil]) ((85 . 86)) nil (22790 20638 88071 837000) 0 nil]) ((#("C" 0 1 (fontified t face font-lock-type-face)) . -85) (undo-tree-id218 . -1) 86 (t 22790 20601 302222 250000)) nil (22790 20638 88093 724000) 0 nil]) ((#("m" 0 1 (fontified t face font-lock-constant-face)) . -69) (undo-tree-id209 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -70) (undo-tree-id210 . -1) (#("d" 0 1 (fontified t face font-lock-constant-face)) . -71) (undo-tree-id211 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -72) (undo-tree-id212 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -73) (undo-tree-id213 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -74) (undo-tree-id214 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -75) (undo-tree-id215 . -1) (#("f" 0 1 (fontified t face font-lock-constant-face)) . -76) (undo-tree-id216 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -77) (undo-tree-id217 . -1) 78 (t 22790 20572 691807 79000)) nil (22790 20601 261307 717000) 0 nil]) ((105 . 106)) nil (22790 20572 659666 740000) 0 nil]) ((99 . 105)) nil (22790 20572 659674 675000) 0 nil]) ((95 . 99)) nil (22790 20572 659679 182000) 0 nil]) ((94 . 95)) nil (22790 20572 659683 231000) 0 nil]) ((#("S" 0 1 (fontified t face font-lock-type-face)) . -94) (undo-tree-id208 . -1) 95) nil (22790 20572 659702 628000) 0 nil]) ((80 . 95)) nil (22790 20572 659708 251000) 0 nil]) ((74 . 80)) nil (22790 20572 659712 167000) 0 nil]) ((73 . 74)) nil (22790 20572 659715 822000) 0 nil]) ((69 . 73)) nil (22790 20572 659719 481000) 0 nil]) ((65 . 69)) nil (22790 20572 659723 329000) 0 nil]) ((64 . 65) (t 22790 20488 380583 545000)) nil (22790 20572 659728 197000) 0 nil]) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 63) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) 65) nil (22790 20488 342043 294000) 0 nil]) ((#("mod c_w_string;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 14 (fontified t face font-lock-constant-face) 14 15 (fontified t)) . 65) (undo-tree-id200 . -15) (undo-tree-id201 . -15) (undo-tree-id202 . -15) (undo-tree-id203 . -15) (undo-tree-id204 . -15) (undo-tree-id205 . -15) (undo-tree-id206 . -15) (undo-tree-id207 . -15) 80 (t 22790 20433 416452 499000)) nil (22790 20488 342077 94000) 0 nil]) ((72 . 80)) nil (22790 20433 311432 255000) 0 nil]) ((65 . 72)) nil (22790 20433 311439 946000) 0 nil]) ((64 . 65)) nil (22790 20433 311444 430000) 0 nil]) ((64 . 65)) nil (22790 20433 311450 604000) 0 nil]) ((4468 . 4469)) nil (22790 20433 311454 419000) 0 nil]) ((#("

" 0 2 (fontified t)) . 4468) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -2) 4470) nil (22790 20433 311513 784000) 0 nil]) ((#("struct CWcharString {
    data: Vec<wchar>,
    n_chars: usize,
}
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 19 (fontified t face font-lock-type-face) 19 26 (fontified t) 26 30 (fontified t face font-lock-variable-name-face) 30 31 (fontified t) 31 32 (fontified t) 32 35 (fontified t face font-lock-type-face) 35 48 (fontified t) 48 55 (face font-lock-variable-name-face fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 62 (face font-lock-type-face fontified t) 62 64 (fontified t) 64 66 (fontified t)) . 4470) (undo-tree-id141 . -66) (undo-tree-id142 . -66) (undo-tree-id143 . -65) (undo-tree-id144 . -65) (undo-tree-id145 . -65) (undo-tree-id146 . -65) (undo-tree-id147 . -65) (undo-tree-id148 . -65) (undo-tree-id149 . -66) (undo-tree-id150 . -66) (undo-tree-id151 . -64) (undo-tree-id152 . -64) (undo-tree-id153 . -44) (undo-tree-id154 . -44) (undo-tree-id155 . -22) (undo-tree-id156 . -22) (undo-tree-id157 . -66) (undo-tree-id158 . -66)) nil (22790 20433 311591 856000) 0 nil]) ((#("
" 0 1 (fontified t)) . 5683) (undo-tree-id159 . -1) 5684) nil (22790 20433 311604 896000) 0 nil]) ((5686 . 5690)) nil (22790 20433 311611 945000) 0 nil]) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . -5686)) nil (22790 20433 311616 335000) 0 nil]) ((#("    fn mbstowcs(__pwcs: *mut wchar, __s: *const c_char, __n: size_t) -> size_t;
    fn wcstombs(__s: *mut c_char, __pwcs: *const wchar, __n: size_t) -> size_t;
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-function-name-face) 15 16 (fontified t) 16 22 (fontified t face font-lock-variable-name-face) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 28 (fontified t face font-lock-keyword-face) 28 36 (fontified t) 36 39 (fontified t face font-lock-variable-name-face) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 47 (fontified t face font-lock-keyword-face) 47 56 (fontified t) 56 59 (fontified t face font-lock-variable-name-face) 59 60 (fontified t) 60 69 (fontified t) 69 70 (fontified t) 70 71 (fontified t syntax-table #5=(1)) 71 84 (fontified t) 84 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 95 (fontified t face font-lock-function-name-face) 95 96 (fontified t) 96 99 (fontified t face font-lock-variable-name-face) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 114 (fontified t) 114 120 (fontified t face font-lock-variable-name-face) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 128 (fontified t face font-lock-keyword-face) 128 136 (fontified t) 136 139 (fontified t face font-lock-variable-name-face) 139 140 (fontified t) 140 149 (fontified t) 149 150 (fontified t) 150 151 (fontified t syntax-table #5#) 151 160 (fontified t)) . 5686) (undo-tree-id160 . -160) (undo-tree-id161 . -160) (undo-tree-id162 . -160)) nil (22790 20433 311630 197000) 0 nil]) ((#("    fn strlen(s: *const c_char) -> size_t;" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (composition (11 1 #1#) fontified t) 16 17 (fontified t) 17 18 (composition (4 1 #3#) fontified t) 18 23 (fontified t face font-lock-keyword-face) 23 32 (fontified t) 32 33 (composition #6=(1 2 [9 57620]) fontified t) 33 34 (composition #6# fontified t syntax-table #5#) 34 42 (fontified t)) . -5846) (undo-tree-id163 . -42) (undo-tree-id164 . -42) 5888) nil (22790 20433 311642 598000) 0 nil]) ((4535 . 4536)) nil (22790 20433 311647 774000) 0 nil]) ((#("


" 0 3 (fontified t)) . 4535) (undo-tree-id165 . -3) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) 4538) nil (22790 20433 311683 722000) 0 nil]) ((#("impl CWcharString {
    unsafe fn from_c_string(c_string: &CString) -> CWcharString {
        let c_string_ptr =
            (&c_string.as_bytes_with_nul()[0] as *const u8) as *const c_char;

        let size_needed = mbstowcs(ptr::null_mut(), c_string_ptr, 0) + 1;

        let mut data = vec![0 as wchar; size_needed as usize];
        let wchar_ptr = &mut data.as_mut_slice()[0] as *mut wchar;

        let n_chars = mbstowcs(wchar_ptr, c_string_ptr, size_needed);

        CWcharString {
            data: data,
            n_chars: n_chars as usize,
        }
    }

    unsafe fn from_str(string: &str) -> CWcharString {
        let c_string = CString::new(string).expect(\"Invalid C string\");
        CWcharString::from_c_string(&c_string)
    }

    unsafe fn as_raw(&self) -> *const wchar {
        &self.data[0] as *const wchar
    }

    unsafe fn from_raw_to_c_string(raw: *const wchar) -> CString {
        let n_bytes = wcstombs(ptr::null_mut(), raw, 0);

        let mut data = vec![0 as u8; (n_bytes + 1) as usize];
        let data_ptr = (&mut data[0] as *mut u8) as *mut c_char;

        wcstombs(data_ptr, raw, n_bytes + 1);
        let c_str = CStr::from_bytes_with_nul(data.as_slice()).expect(\"Invalid c str\");
        c_str.to_owned()
    }
}
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 17 (fontified t face font-lock-type-face) 17 24 (fontified t) 24 30 (fontified t face rust-unsafe-face) 30 31 (fontified t) 31 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 47 (fontified t face font-lock-function-name-face) 47 48 (fontified t) 48 49 (fontified t face font-lock-variable-name-face) 49 56 (fontified t face font-lock-variable-name-face) 56 57 (fontified t) 57 59 (fontified t) 59 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 69 (fontified t) 69 70 (fontified t syntax-table #5#) 70 71 (fontified t) 71 83 (fontified t face font-lock-type-face) 83 86 (fontified t) 86 94 (fontified t) 94 97 (fontified t face font-lock-keyword-face) 97 113 (fontified t) 113 159 (fontified t) 159 161 (fontified t face font-lock-keyword-face) 161 162 (fontified t) 162 163 (fontified t) 163 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 175 (fontified t face font-lock-keyword-face) 175 176 (fontified t) 176 177 (fontified t) 177 182 (fontified t face font-lock-keyword-face) 182 189 (fontified t) 189 191 (fontified t) 191 192 (fontified t) 192 200 (fontified t) 200 203 (fontified t face font-lock-keyword-face) 203 218 (fontified t) 218 227 (fontified t) 227 230 (fontified t face font-lock-constant-face) 230 231 (fontified t) 231 232 (fontified t) 232 240 (fontified t) 240 241 (fontified t) 241 242 (fontified t) 242 244 (fontified t) 244 259 (fontified t) 259 260 (fontified t) 260 261 (fontified t) 261 262 (fontified t) 262 266 (fontified t) 266 275 (fontified t) 275 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-keyword-face) 282 290 (fontified t) 290 294 (fontified t face font-lock-preprocessor-face) 294 297 (fontified t) 297 299 (fontified t face font-lock-keyword-face) 299 319 (fontified t) 319 321 (fontified t face font-lock-keyword-face) 321 322 (fontified t) 322 327 (fontified t face font-lock-type-face) 327 338 (fontified t) 338 341 (fontified t face font-lock-keyword-face) 341 355 (fontified t) 355 358 (fontified t face font-lock-keyword-face) 358 382 (fontified t) 382 384 (fontified t face font-lock-keyword-face) 384 385 (fontified t) 385 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 398 (fontified t) 398 406 (fontified t) 406 409 (fontified t face font-lock-keyword-face) 409 440 (fontified t) 440 452 (fontified t) 452 468 (fontified t) 468 477 (fontified t) 477 489 (fontified t face font-lock-type-face) 489 496 (fontified t) 496 504 (fontified t) 504 508 (face font-lock-variable-name-face fontified t) 508 509 (fontified t) 509 516 (fontified t) 516 528 (fontified t) 528 535 (fontified t face font-lock-variable-name-face) 535 536 (fontified t) 536 545 (fontified t) 545 547 (fontified t face font-lock-keyword-face) 547 548 (fontified t) 548 553 (fontified t face font-lock-type-face) 553 576 (fontified t) 576 582 (fontified t face rust-unsafe-face) 582 583 (fontified t) 583 585 (fontified t face font-lock-keyword-face) 585 586 (fontified t) 586 594 (fontified t face font-lock-function-name-face) 594 595 (fontified t) 595 601 (fontified t face font-lock-variable-name-face) 601 602 (fontified t) 602 604 (fontified t) 604 607 (fontified t face font-lock-type-face) 607 609 (fontified t) 609 610 (fontified t) 610 611 (fontified t syntax-table #5#) 611 612 (fontified t) 612 624 (fontified t face font-lock-type-face) 624 627 (fontified t) 627 635 (fontified t) 635 637 (fontified t face font-lock-keyword-face) 637 638 (fontified t face font-lock-keyword-face) 638 650 (fontified t) 650 657 (fontified t face font-lock-type-face) 657 659 (fontified t) 659 678 (fontified t) 678 679 (fontified t face font-lock-string-face) 679 691 (fontified t face font-lock-string-face) 691 696 (fontified t face font-lock-string-face) 696 699 (fontified t) 699 707 (fontified t) 707 718 (fontified t face font-lock-type-face) 718 719 (fontified t face font-lock-type-face) 719 721 (fontified t) 721 746 (fontified t) 746 757 (fontified t) 757 763 (fontified t face rust-unsafe-face) 763 764 (fontified t) 764 766 (fontified t face font-lock-keyword-face) 766 767 (fontified t) 767 773 (fontified t face font-lock-function-name-face) 773 775 (fontified t) 775 779 (fontified t face font-lock-keyword-face) 779 781 (fontified t) 781 782 (fontified t) 782 783 (fontified t syntax-table #5#) 783 784 (fontified t) 784 785 (fontified t) 785 790 (fontified t face font-lock-keyword-face) 790 799 (fontified t) 799 808 (fontified t) 808 812 (fontified t face font-lock-keyword-face) 812 821 (fontified t) 821 823 (fontified t face font-lock-keyword-face) 823 824 (fontified t) 824 825 (fontified t) 825 830 (fontified t face font-lock-keyword-face) 830 837 (fontified t) 837 848 (fontified t) 848 854 (fontified t face rust-unsafe-face) 854 855 (fontified t) 855 857 (fontified t face font-lock-keyword-face) 857 858 (fontified t) 858 878 (fontified t face font-lock-function-name-face) 878 879 (fontified t) 879 882 (fontified t face font-lock-variable-name-face) 882 883 (fontified t) 883 884 (fontified t) 884 885 (fontified t) 885 890 (fontified t face font-lock-keyword-face) 890 898 (fontified t) 898 899 (fontified t) 899 900 (fontified t syntax-table #5#) 900 901 (fontified t) 901 908 (fontified t face font-lock-type-face) 908 919 (fontified t) 919 922 (fontified t face font-lock-keyword-face) 922 942 (fontified t) 942 945 (fontified t face font-lock-constant-face) 945 947 (fontified t) 947 968 (fontified t) 968 977 (fontified t) 977 980 (fontified t face font-lock-keyword-face) 980 981 (fontified t) 981 984 (fontified t face font-lock-keyword-face) 984 992 (fontified t) 992 996 (fontified t face font-lock-preprocessor-face) 996 999 (fontified t) 999 1001 (fontified t face font-lock-keyword-face) 1001 1002 (fontified t) 1002 1004 (fontified t face font-lock-type-face) 1004 1015 (fontified t) 1015 1016 (fontified t) 1016 1020 (fontified t) 1020 1022 (fontified t face font-lock-keyword-face) 1022 1023 (fontified t) 1023 1028 (fontified t face font-lock-type-face) 1028 1039 (fontified t) 1039 1042 (fontified t face font-lock-keyword-face) 1042 1056 (fontified t) 1056 1059 (fontified t face font-lock-keyword-face) 1059 1068 (fontified t) 1068 1070 (fontified t face font-lock-keyword-face) 1070 1071 (fontified t) 1071 1072 (fontified t) 1072 1075 (fontified t face font-lock-keyword-face) 1075 1076 (fontified t) 1076 1078 (fontified t face font-lock-type-face) 1078 1080 (fontified t) 1080 1082 (fontified t face font-lock-keyword-face) 1082 1083 (fontified t) 1083 1084 (fontified t) 1084 1087 (fontified t face font-lock-keyword-face) 1087 1127 (fontified t) 1127 1137 (fontified t) 1137 1138 (fontified t) 1138 1143 (fontified t) 1143 1151 (fontified t) 1151 1154 (fontified t face font-lock-keyword-face) 1154 1163 (fontified t) 1163 1167 (fontified t face font-lock-type-face) 1167 1169 (fontified t) 1169 1199 (fontified t) 1199 1213 (fontified t) 1213 1228 (fontified t face font-lock-string-face) 1228 1246 (fontified t) 1246 1264 (fontified t)) . 4538) (undo-tree-id176 . -1031) (undo-tree-id177 . -1031) (undo-tree-id178 . -1143) (undo-tree-id179 . -1143) (undo-tree-id180 . -1231) (undo-tree-id181 . -1231) (undo-tree-id182 . -420) (undo-tree-id183 . -218) (undo-tree-id184 . -218) (undo-tree-id185 . -171) (undo-tree-id186 . -1264) (undo-tree-id187 . -516) (undo-tree-id188 . -1264) 5802 (t 22790 17089 924375 169000)) nil (22790 20433 311731 802000) 0 nil]) ((#("    " 0 4 (fontified t)) . -1334) (undo-tree-id79 . -4) (undo-tree-id80 . -4)) nil (22790 17089 885726 107000) 0 nil]) ((1333 . 1338)) nil (22790 17089 885731 494000) 0 nil]) ((#("

" 0 2 (fontified t)) . 1333) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) 1335) nil (22790 17089 885747 880000) 0 nil]) ((#("    pub fn from_data(&mut self, data: &[u8]) -> Result<(), String>{
        let data_len = data.len();
        if data_len == 0 { return Err(\"Data length is 0\".to_string()); }

        self.open_buffer_init(data_len as u64, 0);
        let continue_result = self.open_buffer_continue(data);
        let finalize_result = self.open_buffer_finalize();

        if continue_result & 0x01 == 0 || finalize_result == 0 {
            return Err(\"Could not read buffer\".to_string());
        }

        Ok( () )
    }

    pub fn available_parameters(&mut self) -> String {
        self.option(\"Info_Parameters\", \"\")
    }
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 20 (fontified t face font-lock-function-name-face) 20 22 (fontified t) 22 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 32 (fontified t) 32 36 (fontified t face font-lock-variable-name-face) 36 37 (fontified t) 37 40 (fontified t) 40 42 (fontified t face font-lock-type-face) 42 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t syntax-table #5#) 47 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 59 (fontified t) 59 65 (fontified t face font-lock-type-face) 65 76 (fontified t) 76 79 (fontified t face font-lock-keyword-face) 79 105 (fontified t) 105 111 (fontified t) 111 113 (fontified t face font-lock-keyword-face) 113 123 (fontified t) 123 125 (fontified t) 125 130 (fontified t) 130 136 (fontified t face font-lock-keyword-face) 136 137 (fontified t) 137 140 (fontified t face font-lock-type-face) 140 141 (fontified t) 141 159 (fontified t face font-lock-string-face) 159 176 (fontified t) 176 180 (fontified t) 180 182 (fontified t) 182 185 (fontified t) 185 189 (fontified t face font-lock-keyword-face) 189 216 (fontified t) 216 218 (fontified t face font-lock-keyword-face) 218 219 (fontified t) 219 222 (fontified t face font-lock-type-face) 222 228 (fontified t) 228 236 (fontified t) 236 239 (fontified t face font-lock-keyword-face) 239 258 (fontified t) 258 262 (fontified t face font-lock-keyword-face) 262 291 (fontified t) 291 299 (fontified t) 299 302 (fontified t face font-lock-keyword-face) 302 321 (fontified t) 321 325 (fontified t face font-lock-keyword-face) 325 334 (fontified t) 334 350 (fontified t) 350 359 (fontified t) 359 361 (fontified t face font-lock-keyword-face) 361 385 (fontified t) 385 387 (fontified t) 387 390 (fontified t) 390 392 (fontified t) 392 403 (fontified t) 403 409 (fontified t) 409 411 (fontified t) 411 416 (fontified t) 416 427 (fontified t) 427 428 (fontified t) 428 434 (fontified t face font-lock-keyword-face) 434 435 (fontified t) 435 438 (fontified t face font-lock-type-face) 438 439 (fontified t) 439 462 (fontified t face font-lock-string-face) 462 469 (fontified t) 469 496 (fontified t) 496 498 (fontified t face font-lock-type-face) 498 516 (fontified t) 516 519 (fontified t face font-lock-keyword-face) 519 520 (fontified t) 520 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 543 (fontified t face font-lock-function-name-face) 543 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 549 (fontified t) 549 553 (fontified t face font-lock-keyword-face) 553 555 (fontified t) 555 556 (fontified t) 556 557 (fontified t syntax-table #5#) 557 558 (fontified t) 558 564 (fontified t face font-lock-type-face) 564 575 (fontified t) 575 579 (fontified t face font-lock-keyword-face) 579 587 (fontified t) 587 604 (fontified t face font-lock-string-face) 604 606 (fontified t) 606 608 (fontified t face font-lock-string-face) 608 610 (fontified t) 610 616 (fontified t)) . 1335) (undo-tree-id88 . -610) (undo-tree-id89 . -610) (undo-tree-id90 . -616) (undo-tree-id91 . -610) (undo-tree-id92 . -68) (undo-tree-id93 . -68) (undo-tree-id94 . -103) (undo-tree-id95 . -103) (undo-tree-id96 . -176) (undo-tree-id97 . -176) (undo-tree-id98 . -177) (undo-tree-id99 . -177) (undo-tree-id100 . -228) (undo-tree-id101 . -228) (undo-tree-id102 . -291) (undo-tree-id103 . -291) (undo-tree-id104 . -350) (undo-tree-id105 . -350) (undo-tree-id106 . -351) (undo-tree-id107 . -351) (undo-tree-id108 . -416) (undo-tree-id109 . -416) (undo-tree-id110 . -477) (undo-tree-id111 . -477) (undo-tree-id112 . -487) (undo-tree-id113 . -487) (undo-tree-id114 . -488) (undo-tree-id115 . -488) (undo-tree-id116 . -505) (undo-tree-id117 . -505) (undo-tree-id118 . -511) (undo-tree-id119 . -511) (undo-tree-id120 . -512) (undo-tree-id121 . -512) (undo-tree-id122 . -567) (undo-tree-id123 . -567) (undo-tree-id124 . -616) (undo-tree-id125 . -616) (undo-tree-id126 . -616) (t 22790 16270 474941 515000)) nil (22790 17089 885828 341000) 0 nil]) ((#(";" 0 1 (fontified t)) . -5415) (undo-tree-id78 . -1) 5416 (t 22790 16261 28168 577000)) nil (22790 16270 438190 853000) 0 nil]) ((#("        " 0 8 (fontified t)) . -5346) 5604) nil (22790 16260 981331 570000) 0 nil]) ((5603 . 5604)) nil (22790 16260 981340 483000) 0 nil]) ((#("
                               " 0 1 (fontified t) 1 32 (fontified t)) . -5603) (undo-tree-id63 . -1) (undo-tree-id64 . -1)) nil (22790 16260 981362 777000) 0 nil]) ((#(" " 0 1 (fontified t)) . 5647) (undo-tree-id65 . -1) 5648) nil (22790 16260 981377 280000) 0 nil]) ((#("as *" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (composition (4 1 #3#) fontified t)) . 5648) (undo-tree-id66 . -4) 5652) nil (22790 16260 981387 393000) 0 nil]) ((#("const " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) . 5652) (undo-tree-id67 . -6) 5658) nil (22790 16260 981397 410000) 0 nil]) ((#("c_" 0 2 (fontified t)) . 5658) (undo-tree-id68 . -2) 5660) nil (22790 16260 981407 746000) 0 nil]) ((#("char" 0 4 (fontified t)) . 5660) (undo-tree-id69 . -4) 5664) nil (22790 16260 981417 629000) 0 nil]) ((5419 . 5422)) nil (22790 16260 981422 861000) 0 nil]) ((#("_needed" 0 7 (fontified t)) . -5419)) nil (22790 16260 981427 87000) 0 nil]) ((#(", size" 0 6 (fontified t)) . -5419)) nil (22790 16260 981431 160000) 0 nil]) ((#("_char" 0 5 (fontified t)) . -5419)) nil (22790 16260 981435 663000) 0 nil]) ((#(" c" 0 2 (fontified t)) . -5419)) nil (22790 16260 981439 843000) 0 nil]) ((#(" *const" 0 1 (fontified t) 1 2 (composition (4 1 #3#) fontified t) 2 7 (fontified t face font-lock-keyword-face)) . -5419)) nil (22790 16260 981443 992000) 0 nil]) ((#("s" 0 1 (fontified t)) . -5419)) nil (22790 16260 981448 135000) 0 nil]) ((#("a" 0 1 (fontified t)) . 5419)) nil (22790 16260 981452 368000) 0 nil]) ((#(" " 0 1 (fontified t)) . -5419)) nil (22790 16260 981456 354000) 0 nil]) ((5406 . 5407)) nil (22790 16260 981460 553000) 0 nil]) ((#("
                               " 0 1 (fontified t) 1 32 (fontified t)) . -5406)) nil (22790 16260 981464 709000) 0 nil]) ((5345 . 5354)) nil (22790 16260 981469 414000) 0 nil]) ((5268 . 5280) (#(" " 0 1 (fontified nil)) . 5267) (undo-tree-id70 . -1) (5268 . 5269)) nil (22790 16260 981478 715000) 0 nil]) ((5326 . 5332)) nil (22790 16260 981483 923000) 0 nil]) ((5324 . 5326)) nil (22790 16260 981487 829000) 0 nil]) ((#("r" 0 1 (fontified t)) . -5324) (undo-tree-id71 . -1) 5325) nil (22790 16260 981496 255000) 0 nil]) ((5315 . 5325)) nil (22790 16260 981501 216000) 0 nil]) ((5314 . 5315) (5268 . 5269)) nil (22790 16260 981506 43000) 0 nil]) ((#(")" 0 1 (fontified nil)) . -5364) (5364 . 5365) (#(")" 0 1 (fontified nil)) . -5364) (5364 . 5365) (5363 . 5365) (#("(" 0 1 (fontified nil)) . -5363) (5363 . 5364)) nil (22790 16260 981515 465000) 0 nil]) ((5355 . 5363) (#("null_" 0 5 (fontified t)) . -5355) (undo-tree-id72 . -5) 5360) nil (22790 16260 981527 940000) 0 nil]) ((5359 . 5360)) nil (22790 16260 981533 169000) 0 nil]) ((5355 . 5359) (#("nu" 0 2 (fontified t)) . -5355) (undo-tree-id73 . -2) 5357) nil (22790 16260 981547 578000) 0 nil]) ((5350 . 5357)) nil (22790 16260 981553 315000) 0 nil]) ((#("wchar_" 0 6 (fontified t)) . 5350) (undo-tree-id74 . -6) 5356) nil (22790 16260 981562 14000) 0 nil]) ((#("ptr" 0 3 (fontified t)) . 5356) (undo-tree-id75 . -3) 5359) nil (22790 16260 981571 586000) 0 nil]) ((5341 . 5436)) nil (22790 16260 981576 825000) 0 nil]) ((#("strlen(c_string_ptr as *const c_char)" 0 4 (fontified t) 4 20 (fontified t) 20 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 24 (fontified t composition (4 1 #3#)) 24 29 (fontified t face font-lock-keyword-face) 29 37 (fontified t)) . 5341) (undo-tree-id76 . -37) (undo-tree-id77 . -37) (t 22790 16147 930245 614000)) nil (22790 16260 981589 99000) 0 nil]) ((1124 . 1125)) nil (22790 16147 887895 312000) 0 nil]) ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -1117) (undo-tree-id53 . -1) 1118) nil (22790 16147 887919 424000) 0 nil]) ((1113 . 1117)) nil (22790 16147 887926 262000) 0 nil]) ((1111 . 1112)) nil (22790 16147 887930 98000) 0 nil]) ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -1111) (undo-tree-id54 . -1) 1112) nil (22790 16147 887939 58000) 0 nil]) ((1111 . 1112)) nil (22790 16147 887944 240000) 0 nil]) ((1111 . 1120)) nil (22790 16147 887948 125000) 0 nil]) ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -1111) (undo-tree-id55 . -1) 1112) nil (22790 16147 887956 274000) 0 nil]) ((1107 . 1112)) nil (22790 16147 887961 312000) 0 nil]) ((1104 . 1107)) nil (22790 16147 887965 712000) 0 nil]) ((1102 . 1104)) nil (22790 16147 887969 554000) 0 nil]) ((1096 . 1102)) nil (22790 16147 887973 443000) 0 nil]) ((1088 . 1091) 1093) nil (22790 16147 887978 241000) 0 nil]) ((1089 . 1093)) nil (22790 16147 887982 571000) 0 nil]) ((#("r" 0 1 (fontified t)) . -1089) (undo-tree-id56 . -1) (#("o" 0 1 (fontified t)) . -1090) (undo-tree-id57 . -1) (#("k" 0 1 (fontified t)) . -1091) (undo-tree-id58 . -1) 1092) nil (22790 16147 887998 707000) 0 nil]) ((1088 . 1092)) nil (22790 16147 888005 533000) 0 nil]) ((1076 . 1088) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 1075) (undo-tree-id59 . -1) (1076 . 1077)) nil (22790 16147 888014 497000) 0 nil]) ((1068 . 1076)) nil (22790 16147 888019 705000) 0 nil]) ((1047 . 1068)) nil (22790 16147 888023 397000) 0 nil]) ((1031 . 1034) 1044) nil (22790 16147 888028 232000) 0 nil]) ((#("/" 0 1 (fontified t composition #7=(6 2 #2#))) . -1031) (undo-tree-id60 . -1) (#("/" 0 1 (fontified t composition #7# face font-lock-comment-delimiter-face)) . -1032) (undo-tree-id61 . -1) 1033) nil (22790 16147 888040 189000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1033) (undo-tree-id62 . -1) 1034) nil (22790 16147 888050 522000) 0 nil]) ((1045 . 1047)) nil (22790 16147 888055 524000) 0 nil]) ((1039 . 1044)) nil (22790 16147 888059 723000) 0 nil]) ((1038 . 1040) (#("(" 0 1 (fontified nil face font-lock-warning-face)) . -1038) (1034 . 1039)) nil (22790 16147 888065 573000) 0 nil]) ((1031 . 1034)) nil (22790 16147 888070 584000) 0 nil] [nil nil ((nil fontified t 1022 . 1034) (nil fontified t 1019 . 1022) (nil fontified t 1013 . 1019) (nil face rust-unsafe-face 1013 . 1019) (#("unsafe {
            " 0 6 (fontified t face rust-unsafe-face) 6 9 (fontified t) 9 21 (fontified t)) . -1010) (1031 . 1055) 1031) ((#("unsafe {
            let" 0 6 (fontified nil face rust-unsafe-face) 6 9 (fontified nil face rust-unsafe-face) 9 21 (fontified nil) 21 24 (fontified nil face font-lock-keyword-face)) . 1031) (undo-tree-id49 . -9) (undo-tree-id50 . -9) (undo-tree-id51 . -24) (undo-tree-id52 . -24) (1010 . 1031) (nil face nil 1016 . 1019)) (22790 16074 221063 600000) 0 nil]) ((#("/" 0 1 (fontified t composition #8=(6 2 #2#))) . -1031) (undo-tree-id34 . -1) (#("/" 0 1 (fontified t composition #8# face font-lock-comment-delimiter-face)) . -1032) (undo-tree-id35 . -1) 1033) nil (22790 16074 221405 1000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1033) (undo-tree-id36 . -1) 1034) nil (22790 16074 221109 294000) 0 nil]) ((1031 . 1034)) nil (22790 16074 221114 813000) 0 nil]) ((1018 . 1031)) nil (22790 16074 221118 705000) 0 nil]) ((1031 . 1130)) nil (22790 16074 221122 581000) 0 nil]) ((1018 . 1031)) nil (22790 16074 221126 459000) 0 nil]) ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 1862) (undo-tree-id37 . -13) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -13) (undo-tree-id41 . -13) (undo-tree-id42 . -13) 1875) nil (22790 16074 221149 258000) 0 nil]) ((#("let empty_c_str = CString::new(\"\").unwrap();
            setlocale(LC_CTYPE, empty_c_str.as_ptr());" 0 3 (fontified t face font-lock-keyword-face) 3 18 (fontified t) 18 25 (fontified t face font-lock-type-face) 25 26 (fontified t) 26 27 (fontified t) 27 30 (fontified t) 30 31 (fontified t) 31 33 (fontified t face font-lock-string-face) 33 35 (fontified t) 35 41 (fontified t) 41 42 (fontified t) 42 45 (fontified t) 45 66 (fontified t) 66 67 (fontified t) 67 75 (fontified t face font-lock-type-face) 75 77 (fontified t) 77 89 (fontified t) 89 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t)) . 1875) (undo-tree-id43 . -45) (undo-tree-id44 . -45) (undo-tree-id45 . -99) (undo-tree-id46 . -98) (undo-tree-id47 . -98) (undo-tree-id48 . -99) (t 22790 15988 491868 459000)) nil (22790 16074 221174 105000) 0 nil]) ((1972 . 1973) (#(")" 0 1 (fontified nil)) . -1972) (1972 . 1973)) nil (22790 15988 454001 591000) 0 nil]) ((#(")" 0 1 (fontified t)) . -1970) (undo-tree-id31 . -1) (undo-tree-id32 . 1) (undo-tree-id33 . -1) 1971) nil (22790 15988 454032 836000) 0 nil]) ((#(")" 0 1 (fontified nil)) . -1972) (1972 . 1973) (#(")" 0 1 (fontified nil)) . -1972) (1972 . 1973) (1971 . 1973) (#("(" 0 1 (fontified nil)) . -1971) (1971 . 1972) (t 22790 15978 141760 355000)) nil (22790 15988 454047 155000) 0 nil]) ((1971 . 1972)) nil (22790 15978 101502 605000) 0 nil]) ((1964 . 1970)) nil (22790 15978 101510 686000) 0 nil]) ((1963 . 1964)) nil (22790 15978 101515 260000) 0 nil]) ((1952 . 1963) (#("em" 0 2 (fontified t)) . -1952) (undo-tree-id29 . -2) 1954) nil (22790 15978 101536 355000) 0 nil]) ((1950 . 1954)) nil (22790 15978 101542 509000) 0 nil]) ((1942 . 1950) (#("LC" 0 2 (fontified t face font-lock-type-face)) . -1942) (undo-tree-id30 . -2) 1944) nil (22790 15978 101552 395000) 0 nil]) ((1942 . 1944) (1941 . 1943) (#("(" 0 1 (fontified nil)) . -1941) (1932 . 1942)) nil (22790 15978 101560 613000) 0 nil]) ((1919 . 1932) (t 22790 15941 981385 878000)) nil (22790 15978 101566 945000) 0 nil]) ((1918 . 1919) (#(")" 0 1 (fontified nil)) . -1917) (1917 . 1918) (#(")" 0 1 (fontified nil)) . -1917) (1917 . 1918) (1916 . 1918) (#("(" 0 1 (fontified nil)) . -1916) (1916 . 1917)) nil (22790 15941 948885 82000) 0 nil]) ((1910 . 1916) (#("unw" 0 3 (fontified t)) . -1910) (undo-tree-id1 . -3) 1913) nil (22790 15941 948911 452000) 0 nil]) ((1910 . 1913)) nil (22790 15941 948917 579000) 0 nil]) ((#("w" 0 1 (fontified t)) . -1910) (undo-tree-id2 . -1) (#("u" 0 1 (fontified t)) . -1911) (undo-tree-id3 . -1) (#("n" 0 1 (fontified t)) . -1912) (undo-tree-id4 . -1) 1913) nil (22790 15941 948934 698000) 0 nil]) ((1911 . 1913)) nil (22790 15941 948941 427000) 0 nil]) ((1909 . 1911)) nil (22790 15941 948945 506000) 0 nil]) ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -1909) (undo-tree-id5 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1910) (undo-tree-id6 . -1) (#("." 0 1 (fontified t)) . -1911) (undo-tree-id7 . -1) 1912) nil (22790 15941 948961 863000) 0 nil]) ((#("as_" 0 3 (fontified t)) . 1912) (undo-tree-id8 . -3) 1915) nil (22790 15941 948972 865000) 0 nil]) ((#("bytes()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 1915) (undo-tree-id9 . -7) (undo-tree-id10 . 1) (undo-tree-id11 . -7) (undo-tree-id12 . 2) (undo-tree-id13 . -6) 1922) nil (22790 15941 948993 819000) 0 nil]) ((1906 . 1908) (#("\"" 0 1 (fontified nil)) . -1906) (1906 . 1907) (#("\"" 0 1 (fontified nil)) . -1906) (1906 . 1907)) nil (22790 15941 949003 481000) 0 nil]) ((1905 . 1907) (#("(" 0 1 (fontified nil)) . -1905) (1905 . 1906)) nil (22790 15941 949011 259000) 0 nil]) ((#(" " 0 1 (fontified t)) . -1905)) nil (22790 15941 949016 154000) 0 nil]) ((1902 . 1905)) nil (22790 15941 949020 270000) 0 nil]) ((1900 . 1902)) nil (22790 15941 949024 533000) 0 nil]) ((1893 . 1900) (#("CStrin" 0 6 (fontified t face font-lock-type-face)) . -1893) (undo-tree-id14 . -6) 1899) nil (22790 15941 949033 954000) 0 nil]) ((1893 . 1899)) nil (22790 15941 949039 433000) 0 nil]) ((1893 . 1894)) nil (22790 15941 949043 282000) 0 nil]) ((#("." 0 1 (fontified t)) . -1906) (undo-tree-id15 . -1) 1907) nil (22790 15941 949051 494000) 0 nil]) ((1906 . 1907) (#(")" 0 1 (fontified nil)) . -1905) (1905 . 1906) (#(")" 0 1 (fontified nil)) . -1905) (1905 . 1906) (1904 . 1906) (#("(" 0 1 (fontified nil)) . -1904) (1899 . 1905)) nil (22790 15941 949063 211000) 0 nil]) ((1896 . 1899)) nil (22790 15941 949069 833000) 0 nil]) ((#("t" 0 1 (fontified t)) . -1896) (undo-tree-id16 . -1) (#("o" 0 1 (fontified t)) . -1897) (undo-tree-id17 . -1) 1898) nil (22790 15941 949081 713000) 0 nil]) ((1895 . 1898)) nil (22790 15941 949087 700000) 0 nil]) ((1893 . 1895) (#("\"" 0 1 (fontified nil)) . -1893) (1893 . 1894) (#("\"" 0 1 (fontified nil)) . -1893) (1885 . 1894)) nil (22790 15941 949095 230000) 0 nil]) ((#("z" 0 1 (fontified t)) . -1885) (undo-tree-id18 . -1) 1886) nil (22790 15941 949109 122000) 0 nil]) ((1885 . 1886)) nil (22790 15941 949114 354000) 0 nil]) ((1875 . 1885)) nil (22790 15941 949118 226000) 0 nil]) ((1862 . 1875)) nil (22790 15941 949121 931000) 0 nil]) ((401 . 427)) nil (22790 15941 949125 760000) 0 nil]) ((400 . 402)) nil (22790 15941 949129 488000) 0 nil]) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 769) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -2) (undo-tree-id25 . -2) 771) nil (22790 15941 949155 193000) 0 nil]) ((#("const LC_CTYPE: c_int = 0;" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t) 15 26 (fontified t)) . 771) (undo-tree-id26 . -26) (undo-tree-id27 . -26) (undo-tree-id28 . -26)) nil (22790 15941 949170 545000) 0 nil]) ((785 . 797)) nil (22790 15941 949175 864000) 0 nil]) ((771 . 785)) nil (22790 15941 949179 519000) 0 nil]) ((769 . 771) (t 22790 15792 26560 228000)) nil (22790 15941 949184 219000) 0 nil]) ((766 . 767)) nil (22790 15791 998514 261000) 0 nil]) ((516 . 517)) nil (22790 15791 998517 796000) 0 nil]) ((382 . 385) (#(" " 0 1 (fontified t)) . 382)) nil (22790 15791 998520 548000) 0 nil]) ((164 . 166) (#(" " 0 1 (fontified t)) . 164) (220 . 222) (#(" " 0 1 (fontified t)) . 220) (276 . 278) (#(" " 0 1 (fontified t)) . 276) (301 . 304) (#(" " 0 1 (fontified t)) . 301)) nil (22790 15791 998525 459000) 0 nil]) ((283 . 291)) nil (22790 15791 998528 555000) 0 nil]) ((282 . 283)) nil (22790 15791 998530 333000) 0 nil]) ((#("x" 0 1 (fontified t)) . -282) (undo-tree-id0 . -1) 283) nil (22790 15791 998537 973000) 0 nil]) ((266 . 283)) nil (22790 15791 998540 522000) 0 nil]) ((265 . 266)) nil (22790 15791 998542 238000) 0 nil]) ((7573 . 7575)) nil (22790 15791 998543 834000) 0 nil]) ((7559 . 7573) (#(">" 0 1 (fontified nil)) . -7559) (7557 . 7560)) nil (22790 15791 998546 285000) 0 nil]) ((7552 . 7553)) nil (22790 15791 998548 254000) 0 nil]) ((7550 . 7555)) nil (22790 15791 998549 825000) 0 nil]) ((#("n" 0 1 (fontified nil)) . 7548) (7547 . 7548) (#("s" 0 1 (fontified nil)) . 7546) (7547 . 7548)) nil (22790 15791 998552 693000) 0 nil]) ((7535 . 7550)) nil (22790 15791 998555 90000) 0 nil]) ((7518 . 7535)) nil (22790 15791 998556 814000) 0 nil]) ((7517 . 7519) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -7517) (7505 . 7518)) nil (22790 15791 998559 377000) 0 nil]) ((7500 . 7505) (t 22790 8102 898905 116000)) nil (22790 15791 998562 28000) 0 nil]) nil nil (22790 15791 998563 259000) 0 nil] #9# 8864 227 nil]